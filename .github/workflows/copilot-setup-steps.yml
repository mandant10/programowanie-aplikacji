name: Copilot Setup Steps - Automatyzacja środowiska

on:
  workflow_dispatch:
    inputs:
      setup_type:
        description: 'Typ setupu'
        required: true
        type: choice
        options:
          - full        # Pełny setup od zera
          - minimal     # Minimalne zależności
          - development # Setup dla developmentu (z narzędziami)
          - ci          # Setup dla CI/CD
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/copilot-setup-steps.yml'
      - 'setup/**'

jobs:
  detect-environment:
    name: Wykryj środowisko i wymagania
    runs-on: ubuntu-latest
    outputs:
      has_dotnet: ${{ steps.detect.outputs.has_dotnet }}
      has_python: ${{ steps.detect.outputs.has_python }}
      has_mcp: ${{ steps.detect.outputs.has_mcp }}
      setup_type: ${{ steps.detect.outputs.setup_type }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Detect project requirements
      id: detect
      run: |
        # Wykryj .NET
        if [ -f "*.csproj" ] || [ -f "*.sln" ]; then
          echo "has_dotnet=true" >> $GITHUB_OUTPUT
        else
          echo "has_dotnet=false" >> $GITHUB_OUTPUT
        fi
        
        # Wykryj Python
        if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || ls *.py 1> /dev/null 2>&1; then
          echo "has_python=true" >> $GITHUB_OUTPUT
        else
          echo "has_python=false" >> $GITHUB_OUTPUT
        fi
        
        # Wykryj MCP
        if ls mcp_server_*.py 1> /dev/null 2>&1; then
          echo "has_mcp=true" >> $GITHUB_OUTPUT
        else
          echo "has_mcp=false" >> $GITHUB_OUTPUT
        fi
        
        # Określ typ setupu
        echo "setup_type=${{ github.event.inputs.setup_type || 'full' }}" >> $GITHUB_OUTPUT
        
    - name: Generate setup summary
      run: |
        echo "## 🔍 Wykryte środowisko" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- .NET Project: ${{ steps.detect.outputs.has_dotnet }}" >> $GITHUB_STEP_SUMMARY
        echo "- Python Project: ${{ steps.detect.outputs.has_python }}" >> $GITHUB_STEP_SUMMARY
        echo "- MCP Server: ${{ steps.detect.outputs.has_mcp }}" >> $GITHUB_STEP_SUMMARY
        echo "- Setup Type: ${{ steps.detect.outputs.setup_type }}" >> $GITHUB_STEP_SUMMARY

  setup-dotnet:
    name: Setup .NET Environment
    needs: detect-environment
    if: needs.detect-environment.outputs.has_dotnet == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'
        
    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Install dev tools
      if: needs.detect-environment.outputs.setup_type == 'development' || needs.detect-environment.outputs.setup_type == 'full'
      run: |
        # EF Core Tools
        dotnet tool install --global dotnet-ef
        
        # Format tool
        dotnet tool install --global dotnet-format
        
        # User secrets
        dotnet user-secrets init || true
        
    - name: Build verification
      run: dotnet build --configuration Release
      
    - name: Summary
      run: |
        echo "## ✅ .NET Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        dotnet --version >> $GITHUB_STEP_SUMMARY
        dotnet --list-sdks >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  setup-python:
    name: Setup Python Environment
    needs: detect-environment
    if: needs.detect-environment.outputs.has_python == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Create virtual environment
      run: |
        python -m venv venv
        echo "VIRTUAL_ENV=$PWD/venv" >> $GITHUB_ENV
        echo "$PWD/venv/bin" >> $GITHUB_PATH
        
    - name: Install base dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        
    - name: Install project dependencies
      run: |
        # MCP dependencies
        if [ -f "mcp_server_*.py" ]; then
          pip install mcp httpx
        fi
        
        # Requirements file
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        
    - name: Install dev tools
      if: needs.detect-environment.outputs.setup_type == 'development' || needs.detect-environment.outputs.setup_type == 'full'
      run: |
        pip install black flake8 pytest pytest-asyncio mypy
        
    - name: Summary
      run: |
        echo "## ✅ Python Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        python --version >> $GITHUB_STEP_SUMMARY
        pip list >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  setup-mcp:
    name: Setup MCP Environment
    needs: [detect-environment, setup-python]
    if: needs.detect-environment.outputs.has_mcp == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Install MCP dependencies
      run: |
        pip install mcp httpx websockets
        
    - name: Verify MCP server
      run: |
        # Test import
        python -c "import mcp; print('MCP version:', mcp.__version__ if hasattr(mcp, '__version__') else 'unknown')"
        
    - name: Create MCP config example
      run: |
        cat > mcp_config.json << 'EOF'
        {
          "mcpServers": {
            "minesweeper": {
              "command": "python3",
              "args": ["mcp_server_minesweeper.py"],
              "env": {
                "API_BASE": "http://localhost:5022/api"
              }
            }
          }
        }
        EOF
        
    - name: Summary
      run: |
        echo "## ✅ MCP Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "MCP server ready at: \`mcp_server_minesweeper.py\`" >> $GITHUB_STEP_SUMMARY

  setup-database:
    name: Setup Database (Optional)
    needs: detect-environment
    if: needs.detect-environment.outputs.setup_type == 'full'
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: minesweeper_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Verify database
      run: |
        PGPASSWORD=postgres psql -h localhost -U postgres -d minesweeper_test -c 'SELECT version();'
        
    - name: Summary
      run: |
        echo "## ✅ Database Setup Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "PostgreSQL ready on port 5432" >> $GITHUB_STEP_SUMMARY

  generate-setup-script:
    name: Generate Local Setup Script
    needs: [detect-environment, setup-dotnet, setup-python]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate setup.sh
      run: |
        cat > setup.sh << 'EOFSCRIPT'
        #!/bin/bash
        # Auto-generated setup script
        # Generated by copilot-setup-steps.yml
        
        set -e
        
        echo "🚀 Setup środowiska - MinesweeperAPI"
        echo ""
        
        # Kolory
        GREEN='\033[0;32m'
        YELLOW='\033[1;33m'
        NC='\033[0m'
        
        # .NET Setup
        if [ -f "*.csproj" ] || [ -f "*.sln" ]; then
          echo -e "${YELLOW}📦 Setup .NET...${NC}"
          
          # Sprawdź .NET SDK
          if ! command -v dotnet &> /dev/null; then
            echo "❌ .NET SDK nie znalezione. Zainstaluj: https://dotnet.microsoft.com/download"
            exit 1
          fi
          
          echo "✅ .NET SDK: $(dotnet --version)"
          
          # Restore
          dotnet restore
          
          # Build
          dotnet build --configuration Release
          
          echo -e "${GREEN}✅ .NET setup complete${NC}"
        fi
        
        # Python Setup
        if ls *.py 1> /dev/null 2>&1; then
          echo ""
          echo -e "${YELLOW}🐍 Setup Python...${NC}"
          
          # Sprawdź Python
          if ! command -v python3 &> /dev/null; then
            echo "❌ Python3 nie znalezione."
            exit 1
          fi
          
          echo "✅ Python: $(python3 --version)"
          
          # Venv
          if [ ! -d "venv" ]; then
            echo "Tworzę virtual environment..."
            python3 -m venv venv
          fi
          
          # Activate
          source venv/bin/activate
          
          # Pip
          pip install --upgrade pip
          
          # MCP dependencies
          if ls mcp_server_*.py 1> /dev/null 2>&1; then
            echo "Instaluję MCP dependencies..."
            pip install mcp httpx
          fi
          
          # Requirements
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          
          echo -e "${GREEN}✅ Python setup complete${NC}"
        fi
        
        # Dev tools
        echo ""
        echo -e "${YELLOW}🔧 Setup dev tools...${NC}"
        
        # Git hooks
        if [ -d ".git" ]; then
          echo "Konfiguruję git hooks..."
          # Pre-commit hook
          cat > .git/hooks/pre-commit << 'EOFHOOK'
        #!/bin/bash
        # Auto-format przed commit
        if command -v dotnet &> /dev/null; then
          dotnet format --verify-no-changes || dotnet format
        fi
        EOFHOOK
          chmod +x .git/hooks/pre-commit
        fi
        
        echo -e "${GREEN}✅ Dev tools setup complete${NC}"
        
        # Summary
        echo ""
        echo "======================================"
        echo "✅ Setup zakończony!"
        echo "======================================"
        echo ""
        echo "Następne kroki:"
        echo ""
        echo "  1. Uruchom backend API:"
        echo "     dotnet run"
        echo ""
        echo "  2. Uruchom MCP server:"
        echo "     source venv/bin/activate  # Jeśli Python"
        echo "     python3 mcp_server_minesweeper.py"
        echo ""
        echo "  3. Testy:"
        echo "     ./test_mcp_quick.sh"
        echo ""
        EOFSCRIPT
        
        chmod +x setup.sh
        
    - name: Upload setup script
      uses: actions/upload-artifact@v4
      with:
        name: setup-script
        path: setup.sh
        
    - name: Summary
      run: |
        echo "## 📜 Setup Script Generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Download and run:" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "./setup.sh" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  final-summary:
    name: Final Setup Summary
    needs: [detect-environment, setup-dotnet, setup-python, setup-mcp, generate-setup-script]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Create comprehensive summary
      run: |
        echo "# 🎉 Copilot Setup - Podsumowanie" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Ukończone kroki:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- Wykrycie środowiska" >> $GITHUB_STEP_SUMMARY
        echo "- Setup .NET: ${{ needs.setup-dotnet.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Setup Python: ${{ needs.setup-python.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Setup MCP: ${{ needs.setup-mcp.result }}" >> $GITHUB_STEP_SUMMARY
        echo "- Generacja skryptu: ${{ needs.generate-setup-script.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📥 Następne kroki:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. Pobierz wygenerowany \`setup.sh\` z Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Uruchom lokalnie: \`./setup.sh\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Sprawdź \`.github/SETUP_GUIDE.md\`" >> $GITHUB_STEP_SUMMARY
